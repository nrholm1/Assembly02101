CHIP CPU {
    // Interface
    // CPU(inM=input16, instruction=instruction16, reset=reset, outM=outM16, writeM=outwriteIntoM, addressM=outAddressM15, pc=outPc15);


    IN inM[16], instruction[16], reset;
    OUT outM[16], writeM, addressM[15], pc[15];
    PARTS:

    // declare c-bit variables (syntactical sugar)
    Or16(a=instruction, b=instruction, out[15]=cInstruction,
                                        out[13..14]=dump,

                                        out[12]=a,

                                        // ALU control bits
                                        out[11]=zeroX,
                                        out[10]=negateX,
                                        out[9]=zeroY,
                                        out[8]=negateY,
                                        out[7]=whatCompute,
                                        out[6]=negateOutput,

                                        // destination bits
                                        out[5]=aCbit,
                                        out[4]=dCbit,
                                        out[3]=dest3,

                                        // jump bits
                                        out[2]=jb3,
                                        out[1]=jb2,
                                        out[0]=jb1);
    
    // a-instruction
    Not(in=cInstruction, out=aInstruction);
    
    // A
    Mux16(a=outALU, b=instruction, sel=aInstruction, out=outMux16);
    Or(a=aCbit, b=aInstruction, out=loadA);
    ARegister(in=outMux16, load=loadA, out[0..14]=addressM, out=regAout);

    // D
    And(a=cInstruction,b=a,out=inMOrA);
    Mux16(a=regAout, b=inM, sel=inMOrA, out=muxToALU);
    And(a=cInstruction, b=dCbit, out=loadD);
    DRegister(in=outALU, load=loadD, out=regDout);


    ALU(x=regDout, y=muxToALU, // Input 
        zx=zeroX, nx=negateX, zy=zeroY, ny=negateY, f=whatCompute, no=negateOutput, // c-bits
        out=outALU, out=outM, zr=outEquals0, ng=outNegative); // output

    
    Or(a=outEquals0,b=outNegative,out=alu0orless);    
    Not(in=alu0orless, out=aluPos);
    
    And(a=jb1, b=aluPos, out=jgz);
    And(a=jb2, b=outEquals0, out=jmp);
    And(a=jb3, b=outNegative, out=jlz);

    Or(a=jgz, b=jmp, out=jte);
    Or(a=jlz, b=jte, out=temp);
    And(a=temp, b=cInstruction, out=jmpCbit);
    Not(in=jmpCbit,out=incCbit);
    PC(in=regAout, 
        load=jmpCbit, inc=incCbit, reset=reset, 
        out[0..14]=pc);

    And(a=cInstruction, b=dest3, out=writeM);
}