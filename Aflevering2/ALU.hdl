CHIP ALU {

    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;
    PARTS:
    // if zx 
    Mux16(a=x, b[0..15]=false, sel=zx, out=x0);
    // if zy
    Mux16(a=y, b[0..15]=false, sel=zy, out=y0);

    // if nx
    Not16(in=x0, out=notx);
    Mux16(a=x0, b=notx, sel=nx, out=negx);

    // if ny
    Not16(in=y0, out=noty);
    Mux16(a=y0, b=noty, sel=ny, out=negy);

    // if f == 1
    Add16(a=negx, b=negy, out=xpy);

    // if f == 0
    And16(a=negx, b=negy, out=xandy);

    // choose add or and
    Mux16(a=xandy, b=xpy, sel=f, out=fout);

    // if no
    Not16(in=fout, out=nfout);

    // data bits output
    Mux16(a=fout, b=nfout, sel=no, out[0..7]=final1, out[8..15]=final2); // will not be altered
    
    // control bits output
    // zr
    Or8Way(in=final1, out=nzr1);
    Or8Way(in=final2, out=nzr2);
    Or(a=nzr1, b=nzr2, out=nzr);
    Not(in=nzr, out=zr);

    // ng
    And16(a[0..7]=final1, a[8..15]=final2, b[0..15]=true, out[15]=ng, out[0..14]=q);

    And16(a[0..7]=final1, a[8..15]=final2, b[0..15]=true, out=out); // simply output final
}